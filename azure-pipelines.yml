variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  vmPool: 'windows-latest'
  majorVersion: 2
  minorVersion: 0
  patchVersion: 2
  version: $[format('{0}.{1}.{2}', variables.majorVersion, variables.minorVersion, variables.patchVersion)]
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    # Versioning: 1.0.0
    releaseOnGithub: true
    semVersion: $[format('{0}', variables.version)]
    buildName: $[format('{0}', variables.semVersion)]
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
    # Versioning: 1.0.0-develop.123
    releaseOnGithub: false
    semVersionBase: $[format('{0}-develop', variables.version)]
    semVersionRev: $[counter(variables.semVersionBase, 0)]
    semVersion: $[format('{0}.{1}', variables.semVersionBase, variables.semVersionRev)]
    buildName: $[format('Develop - {0}', variables.semVersion)]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/release/') }}:
    # Versioning: 1.0.0-alpha.branch.123
    releaseOnGithub: false
    semVersionBase: $[format('{0}-alpha.{1}', variables.version, variables['Build.SourceBranchName'])]
    semVersionRev: $[counter(variables.semVersionBase, 0)]
    semVersion: $[format('{0}.{1}', variables.semVersionBase, variables.semVersionRev)]
    buildName: $[format('Release - {0}', variables.semVersion)]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/') }}:
    # Versioning: 1.0.0-feature.branch.123
    releaseOnGithub: false
    semVersionBase: $[format('{0}-feature.{1}', variables.version, variables['Build.SourceBranchName'])]
    semVersionRev: $[counter(variables.semVersionBase, 0)]
    semVersion: $[format('{0}.{1}', variables.semVersionBase, variables.semVersionRev)]
    buildName: $[format('Feature - {0}', variables.semVersion)]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}: # Pull requests
    # Versioning: 1.0.0-pr.1.123
    releaseOnGithub: false
    semVersionBase: $[format('{0}-pr.{1}', variables.version, variables['System.PullRequest.PullRequestId'])]
    semVersionRev: $[counter(variables.semVersionBase, 0)]
    semVersion: $[format('{0}.{1}', variables.semVersionBase, variables.semVersionRev)]
    buildName: $[format('Pull Request - {0}', variables.semVersion)]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/bugfix/') }}:
    # Versioning: 1.0.0-bugfix.branch.123
    releaseOnGithub: false
    semVersionBase: $[format('{0}-bugfix.{1}', variables.version, variables['Build.SourceBranchName'])]
    semVersionRev: $[counter(variables.semVersionBase, 0)]
    semVersion: $[format('{0}.{1}', variables.semVersionBase, variables.semVersionRev)]
    buildName: $[format('Bugfix - {0}', variables.semVersion)]

name: $(BuildID) - $(buildName)

trigger:
  branches:
    include:
      - master
      - develop
      - release/*
      - feature/*
      - bugfix/*
      - hotfix/*
  paths:
    exclude:
      - README.md
      - CHANGELOG.md
      - docs/*

pr:
  branches:
    include:
      - master
      - develop
      - release/*
  paths:
    exclude:
      - README.md
      - CHANGELOG.md
      - docs/*
      
stages:
  - stage: Build
    displayName: Build
    pool:
      vmImage: $(vmPool)
    jobs:
      - job: BuildCLi
        displayName: Build CLI
        steps:
          - task: DotNetCoreCLI@2
            displayName: Dotnet build
            inputs:
              command: build
              projects: 'Enterspeed.Cli.sln'
              arguments: '--configuration Release /p:Version=$(semVersion)'

          - task: DotNetCoreCLI@2
            displayName: Dotnet test
            inputs:
              command: test
              arguments: '--no-build --configuration Release'

      - job: PublishWinx64Artifact
        displayName: Publish win-x64 artifact
        dependsOn: BuildCLi
        steps:
        
          - task: DotNetCoreCLI@2
            displayName: win-x64 - Dotnet publish
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: 'src/Enterspeed.Cli/Enterspeed.Cli.csproj'
              arguments: '-c Release -r win-x64 -p:PublishReadyToRun=true -p:Version=$(semVersion) --self-contained -o $(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_win-x64'
              zipAfterPublish: false
              modifyOutputPath: false
            
          - task: PowerShell@2
            displayName: win-x64 - zip
            inputs:
              targetType: 'inline'
              script: '& 7z.exe a -tzip $(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_win-x64.zip $(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_win-x64/es-cli.exe'

          - task: PublishPipelineArtifact@1
            displayName: win-x64 - Publish artifact
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_win-x64.zip"
              artifact: 'es-cli_$(semVersion)_win-x64'

      - job: PublishLinuxx64Artifact
        displayName: Publish linux-x64 artifact
        dependsOn: BuildCLi
        steps:
          - task: DotNetCoreCLI@2
            displayName: linux-x64 - Dotnet publish
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: 'src/Enterspeed.Cli/Enterspeed.Cli.csproj'
              arguments: '-c Release -r linux-x64 -p:PublishReadyToRun=true -p:Version=$(semVersion) --self-contained -o $(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_linux-x64'
              zipAfterPublish: false
              modifyOutputPath: false
            
          - task: PowerShell@2
            displayName: linux-x64 - gzip
            inputs:
              targetType: 'inline'
              script: '& 7z.exe a -tgzip $(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_linux-x64.gz $(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_linux-x64/es-cli'

          - task: PublishPipelineArtifact@1
            displayName: linux-x64 - Publish artifact
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_linux-x64.gz"
              artifact: 'es-cli_$(semVersion)_linux-x64'

      - job: PublishOsxx64Artifact
        displayName: Publish osx-x64 artifact
        dependsOn: BuildCLi
        steps:
          - task: DotNetCoreCLI@2
            displayName: osx-x64 - Dotnet publish
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: 'src/Enterspeed.Cli/Enterspeed.Cli.csproj'
              arguments: '-c Release -r osx-x64 -p:PublishReadyToRun=true -p:Version=$(semVersion) --self-contained -o $(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_osx-x64'
              zipAfterPublish: false
              modifyOutputPath: false
            
          - task: PowerShell@2
            displayName: osx-x64 - gzip
            inputs:
              targetType: 'inline'
              script: '& 7z.exe a -tgzip $(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_osx-x64.gz $(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_osx-x64/es-cli'

          - task: PublishPipelineArtifact@1
            displayName: osx-x64 - Publish artifact
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_osx-x64.gz"
              artifact: 'es-cli_$(semVersion)_osx-x64'

      - job: PublishOsxarm64Artifact
        displayName: Publish osx-arm64 artifact
        dependsOn: BuildCLi
        steps:
          - task: DotNetCoreCLI@2
            displayName: osx-arm64 - Dotnet publish
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: 'src/Enterspeed.Cli/Enterspeed.Cli.csproj'
              arguments: '-c Release -r osx-arm64 -p:PublishReadyToRun=true -p:Version=$(semVersion) --self-contained -o $(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_osx-arm64'
              zipAfterPublish: false
              modifyOutputPath: false
            
          - task: PowerShell@2
            displayName: osx-arm64 - gzip
            inputs:
              targetType: 'inline'
              script: '& 7z.exe a -tgzip $(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_osx-arm64.gz $(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_osx-arm64/es-cli'

          - task: PublishPipelineArtifact@1
            displayName: osx-arm64 - Publish artifact
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/Output/es-cli_$(semVersion)_osx-arm64.gz"
              artifact: 'es-cli_$(semVersion)_osx-arm64'

  - stage: ReleaseOnGithub
    displayName: Release on Github
    pool:
      vmImage: $(vmPool)
    condition: and(succeeded(), eq(variables.releaseOnGithub, 'true'))
    jobs:
      - job:
        displayName: Create release on Github
        
        steps:
          - checkout: self
            persistCredentials: true
            clean: true
            fetchDepth: 1
            
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              downloadPath: '$(System.ArtifactsDirectory)'
              cleanDestinationFolder: true

          - task: GitHubRelease@1
            inputs:
              gitHubConnection: GithubReleaseCli 
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'userSpecifiedTag'
              #tagPattern: # string. Optional. Use when tagSource = gitTag. Tag Pattern. 
              tag: '$(semVersion)' 
              #title: # string. Optional. Use when action = create || action = edit. Release title. 

              releaseNotesSource: 'filePath' # 'filePath' | 'inline'. Optional. Use when action = create || action = edit. Release notes source. Default: filePath.
              releaseNotesFilePath: '$(Build.SourcesDirectory)/releaseNotes/$(semVersion).md' # string. Optional. Use when releaseNotesSource = filePath. Release notes file path. 
              #releaseNotesInline: # string. Optional. Use when releaseNotesSource = inline. Release notes. 

              assets: '$(System.ArtifactsDirectory)/**'
              #assetUploadMode: 'delete' # 'delete' | 'replace'. Optional. Use when action = edit. Asset upload mode. Default: delete.
              #isDraft: false # boolean. Optional. Use when action = create || action = edit. Draft release. Default: false.
              #isPreRelease: false # boolean. Optional. Use when action = create || action = edit. Pre-release. Default: false.

              addChangeLog: false # boolean. Optional. Use when action = create || action = edit. Add changelog. Default: true.
              # Changelog configuration
              #changeLogCompareToRelease: 'lastFullRelease' # 'lastFullRelease' | 'lastNonDraftRelease' | 'lastNonDraftReleaseByTag'. Required when addChangeLog = true. Compare to. Default: lastFullRelease.
              #changeLogCompareToReleaseTag: # string. Required when changeLogCompareToRelease = lastNonDraftReleaseByTag. Release Tag. 
              #changeLogType: 'commitBased' # 'commitBased' | 'issueBased'. Required when addChangeLog = true. Changelog type. Default: commitBased.
              #changeLogLabels: '[{ "label" : "bug", "displayName" : "Bugs", "state" : "closed" }]' # string. Optional. Use when changeLogType = issueBased. Categories. Default: [{ "label" : "bug", "displayName" : "Bugs", "state" : "closed" }].
